#include <iostream>
#include <stdio.h>

#define SIZE 6
#define INF  9999999

	int dev_mat[SIZE][SIZE] = {
		{ 0, 4, INF, 5, 5, INF     },
		{ INF, 0, 7, 3, INF, INF   },
		{ INF, INF, 0, INF, INF, 4 },
		{ 7, INF, 3, 0, 4, 3       },
		{ 2, INF, INF, 6, 0, INF   },
		{ INF, INF, INF, 2, 1, 0   }
	};

	
	__global__ CUDA_RF(int *dev_mat, int k) {
		int i = threadId.x;
		int j = threadId.y;
		
		if(dev_mat[i][j] > dev_mat[i][k] + dev_mat[k][j])
			dev_mat[i][j] = dev_mat[i][k] + dev_mat[k][j]; 

	};

	void main() {
		int * host_mat;
		dim3 threadsPerBlock(SIZE, SIZE);
		
		cudaMalloc(&dev_mat, SIZE);
		cudaMemCpy(dev_mat, host_mat, SIZE, cudaMemCpyHosttoDevice);
		
		for(int k = 0; k < SIZE; k++) {
			CUDA_RF<<1, threadsPerBlock>>(dev_mat, k);
		}

		cudaMemCpy(host_mat, dev_mat, SIZE, cudaMemCpyDevicetoHost);
		cudaFree(dev_mat);

		for(int i = 0; i < SIZE; i++) {
			for(int j = 0; j < SIZE; j++) {
				cout << host_mat << " ";
			}
			cout << endl;
		}
}